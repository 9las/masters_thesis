exp()
mle_rho_residuals_multinormal_trans <- mle_z_residuals_multinormal_trans %>%
tanh()
mle_sigma2_log_residuals_multinormal_trans
mle_z_residuals_multinormal_trans
mle_sigma2_residuals_multinormal_trans
mle_rho_residuals_multinormal_trans
i_residuals_multinormal_trans <- - hessian(func = ll_residuals_multinormal_trans,
x = c(mle_sigma2_log_residuals_multinormal_trans,
mle_z_residuals_multinormal_trans),
y = e)
i_inverse_residuals_multinormal_trans <- solve(i_residuals_multinormal_trans)
var_sigma2_log_residuals_multinormal_trans <- i_inverse_residuals_multinormal_trans[1, 1]
var_z_residuals_multinormal_trans <- i_inverse_residuals_multinormal_trans[2, 2]
ip_sigma2_log_residuals_multinormal_trans <- 1 / var_sigma2_log_residuals_multinormal_trans
ip_z_residuals_multinormal_trans <- 1 / var_z_residuals_multinormal_trans
se_sigma2_log_residuals_multinormal_trans <- var_sigma2_log_residuals_multinormal_trans %>%
sqrt()
se_z_residuals_multinormal_trans <- var_z_residuals_multinormal_trans %>%
sqrt()
se_sigma2_log_residuals_multinormal_trans
se_z_residuals_multinormal_trans
wci_sigma2_log_residuals_multinormal_trans <- mle_sigma2_log_residuals_multinormal_trans + c(-1, 1) *
qnorm(p = 1 - significance_level / 2) * se_sigma2_log_residuals_multinormal_trans
wci_z_residuals_multinormal_trans <- mle_z_residuals_multinormal_trans + c(-1, 1) *
qnorm(p = 1 - significance_level / 2) * se_z_residuals_multinormal_trans
wci_sigma2_residuals_multinormal_trans <- wci_sigma2_log_residuals_multinormal_trans %>%
exp()
wci_rho_residuals_multinormal_trans <- wci_z_residuals_multinormal_trans %>%
tanh()
wci_sigma2_residuals_multinormal_trans
wci_rho_residuals_multinormal_trans
llp_residuals_multinormal_trans_z <- function(z, y){
optimise(f = function(sigma2_log, z, y){
ll_residuals_multinormal_trans(theta = c(sigma2_log,
z),
y = y)
},
interval = c(log(0.01),
log(100)),
maximum = TRUE,
z = z,
y = y) %>%
pluck("objective")
}
llp_residuals_multinormal_trans_z_eval <- tibble(z = seq(from = mle_z_residuals_multinormal_trans - 4 * se_z_residuals_multinormal_trans,
to = mle_z_residuals_multinormal_trans + 4 * se_z_residuals_multinormal_trans,
by = 0.001),
ll = z %>%
map_dbl(.f = llp_residuals_multinormal_trans_z,
y = e),
ll_norm = ll - max(ll),
l_norm = ll_norm %>%
exp(),
ll_norm_approx = -0.5 * ip_z_residuals_multinormal_trans *
(z - mle_z_residuals_multinormal_trans)^2,
l_norm_approx = ll_norm_approx %>%
exp())
llp_residuals_multinormal_trans_z_eval %>%
ggplot(mapping = aes(x = z,
y = l_norm))+
geom_line()+
geom_line(mapping = aes(y = l_norm_approx),
lty = "dotted",
color = "blue")+
geom_hline(yintercept = cutoff,
lty = "dashed")+
geom_vline(xintercept = wci_z_residuals_multinormal_trans,
lty = "dashed")+
labs(title = "Profile Likelihood of z")+
theme(axis.title = element_blank())
ll_residuals_ar1_conditional <- function(theta, y){
sigma2_log <- theta %>%
pluck(1)
phi_arctanh <- theta %>%
pluck(2)
sigma2 <- sigma2_log %>%
exp()
phi <- phi_arctanh %>%
tanh()
y[-1] %>%
dnorm(mean = phi * y[-length(y)],
sd = sigma2 %>%
sqrt(),
log = TRUE) %>%
sum()
}
opt_residuals_ar1_conditional <- optim(par = c(log(1),
atanh(0)),
fn = ll_residuals_ar1_conditional,
control = list(fnscale = -1),
y = residuals_transformation1_regression3)
mle_sigma2_log_residuals_ar1_conditional <- opt_residuals_ar1_conditional %>%
pluck("par",
1)
mle_phi_arctanh_residuals_ar1_conditional <- opt_residuals_ar1_conditional %>%
pluck("par",
2)
mle_sigma2_residuals_ar1_conditional <- mle_sigma2_log_residuals_ar1_conditional %>%
exp()
mle_phi_residuals_ar1_conditional <- mle_phi_arctanh_residuals_ar1_conditional %>%
tanh()
mle_sigma2_log_residuals_ar1_conditional
mle_phi_arctanh_residuals_ar1_conditional
mle_sigma2_residuals_ar1_conditional
mle_phi_residuals_ar1_conditional
ll_residuals_ar1_full <- function(theta, y){
sigma2_log <- theta %>%
pluck(1)
phi_arctanh <- theta %>%
pluck(2)
sigma2 <- sigma2_log %>%
exp()
phi <- phi_arctanh %>%
tanh()
y[1] %>%
dnorm(mean = 0,
sd = sqrt(sigma2 / (1-phi^2)),
log = TRUE) +
ll_residuals_ar1_conditional(theta = theta,
y = y)
}
opt_residuals_ar1_full <- optim(par = c(log(mle_sigma2_residuals_ar1_conditional),
atanh(mle_phi_residuals_ar1_conditional)),
fn = ll_residuals_ar1_full,
control = list(fnscale = -1),
y = residuals_transformation1_regression3)
mle_sigma2_log_residuals_ar1_full <- opt_residuals_ar1_full %>%
pluck("par",
1)
mle_phi_arctanh_residuals_ar1_full <- opt_residuals_ar1_full %>%
pluck("par",
2)
mle_sigma2_residuals_ar1_full <- mle_sigma2_log_residuals_ar1_full %>%
exp()
mle_phi_residuals_ar1_full <- mle_phi_arctanh_residuals_ar1_full %>%
tanh()
mle_sigma2_log_residuals_ar1_full
mle_phi_arctanh_residuals_ar1_full
mle_sigma2_residuals_ar1_full
mle_phi_residuals_ar1_full
residuals_transformation1_regression3 %>%
arima(order = c(1,0,0),
include.mean = FALSE)
mle_rho_residuals_multinormal_trans
mle_phi_residuals_ar1_full
mle_sigma2_residuals_multinormal_trans
mle_sigma2_residuals_ar1_full / (1 - mle_phi_residuals_ar1_full^2)
ll_combined <- function(theta, y, X){
n_theta <- length(theta)
beta <- theta[1:(n_theta - 2)]
var_log <- theta %>%
pluck(n_theta - 1)
phi_arctanh <- theta %>%
pluck(n_theta)
mean_ <- X %*% beta
var <- var_log %>%
exp()
phi <- phi_arctanh %>%
tanh()
lambda <- lambda_hat_pow_transformation1_regression3
y_lambda <- y %>%
transformation1(lambda = lambda)
e <- y_lambda - mean_
ll_conditional <- (y_lambda[-1] %>%
dnorm(mean = mean_[-1] + phi * e[-length(e)],
sd = var %>%
sqrt(),
log = TRUE) -
log(y[-1]) - log(1 - y[-1]^lambda)) %>%
sum()
y_lambda[1] %>%
dnorm(mean = mean_[1],
sd = sqrt(var / (1-phi^2)),
log = TRUE) -
log(y[1]) - log(1 - y[1]^lambda) +
ll_conditional
}
opt_combined <- optim(par = c(beta_hat_pow_transformation1_regression3,
log(1),
atanh(0)),
fn = ll_combined,
control = list(fnscale = -1),
y = data_tuno %>%
pull(pow.obs.norm),
X = X3)
mle_beta_combined <- opt_combined %>%
pluck("par") %>%
.[1:4]
mle_var_log_combined <- opt_combined %>%
pluck("par",
5)
mle_phi_arctanh_combined <- opt_combined %>%
pluck("par",
6)
mle_var_combined <- mle_var_log_combined %>%
exp()
mle_phi_combined <- mle_phi_arctanh_combined %>%
tanh()
mle_beta_combined
mle_var_combined
mle_phi_combined
ll_max_linear <- opt_transformation1_regression3 %>%
pluck("objective")
ll_max_combined <- opt_combined %>%
pluck("value")
pchisq(q = -2 * (ll_max_linear - ll_max_combined),
df = 1,
lower.tail = FALSE)
ggplot(mapping = aes(sample = fit_transformation1_regression3 %>%
residuals()))+
stat_qq()+
stat_qq_line()+
labs(title = "Q-Q Plot of Residuals",
subtitle = "1. Transformation",
x = "Standard Normal Quantile",
y = "Observed Quantile")
library(metR)
library(tidyverse)
library(numDeriv)
library(circular)
library(broom)
library(mvtnorm)
ggplot(mapping = aes(sample = fit_transformation1_regression3 %>%
residuals()))+
stat_qq()+
stat_qq_line()+
labs(title = "Q-Q Plot of Residuals",
subtitle = "1. Transformation",
x = "Standard Normal Quantile",
y = "Observed Quantile")
ggsave(filename = "q_q_plot__residuals__regression__transformation1__plot.svg",
path = "output",
width = 15,
height = 10,
units = "cm")
ggplot(mapping = aes(x = fit_transformation1_regression3 %>%
fitted.values(),
y = fit_transformation1_regression3 %>%
residuals()))+
geom_point()+
labs(x = "Fitted values",
y = "Residuals")
ggplot(mapping = aes(x = fit_transformation1_regression3 %>%
fitted.values(),
y = fit_transformation1_regression3 %>%
residuals()))+
geom_point()+
labs(x = "Fitted values",
y = "Residuals")
ggsave(filename = "residuals_vs_fitted__regression__transformation1__plot.svg",
path = "output",
width = 15,
height = 10,
units = "cm")
1:6
4^1:3
4^(1:3)
mle_var_combined
4^0
2*0:2
tibble(j = seq(from = 1,
to = 10),
variance = mle_var_combined * sum(mle_phi_combined^(2*
seq(from = 0,
to = j-1))))
tibble(j seq(from = 1,
tibble(j = seq(from = 1,
to = 10))
tibble(abe = seq(from = 1,
to = 10),
variance = mle_var_combined * sum(mle_phi_combined^(2*
seq(from = 0,
to = abe-1))))
tibble(j = seq(from = 1,
to = 10),
variance = mle_var_combined * sum(mle_phi_combined^(2*
seq(from = 0,
to = j - 1))))
tibble(j = seq(from = 1,
to = 10),
variance = mle_var_combined * sum(mle_phi_combined^(2*
seq(from = 0,
to = (j-1)))))
tibble(j = seq(from = 1,
to = 10),
variance = mle_var_combined * sum(mle_phi_combined^(2*
seq(from = 0,
to = j))))
tibble(j = seq(from = 1,
to = 10),
variance = mle_var_combined * sum(mle_phi_combined^(2*
seq(from = 0,
to = 4))))
tibble(j = seq(from = 1,
to = 10),
variance = map(.x = j, .f = ~ mle_var_combined * sum(mle_phi_combined^(2*
seq(from = 0,
to = 4)))))
tibble(j = seq(from = 1,
to = 10),
variance = map2_dbl(.x = j, .f = ~ mle_var_combined * sum(mle_phi_combined^(2*
seq(from = 0,
to = 4)))))
tibble(j = seq(from = 1,
to = 10),
variance = map_dbl(.x = j, .f = ~ mle_var_combined * sum(mle_phi_combined^(2*
seq(from = 0,
to = 4)))))
tibble(j = seq(from = 1,
to = 10),
variance = map_dbl(.x = j, .f = ~ mle_var_combined * sum(mle_phi_combined^(2*
seq(from = 0,
to = j-1)))))
tibble(j = seq(from = 1,
to = 10),
variance = map_dbl(.x = j, .f = ~ mle_var_combined * sum(mle_phi_combined^(2*
seq(from = 0,
to = .x-1)))))
mle_var_combined
tibble(j = seq(from = 1,
to = 10),
variance = map_dbl(.x = j, .f = ~ mle_var_combined * sum(mle_phi_combined^(2*
seq(from = 0,
to = .x-1))))) %>%
ggplot(mapping = aes(x = j,
y = variance))+
geom_point()
tibble(j = seq(from = 1,
to = 10),
variance = map_dbl(.x = j, .f = ~ mle_var_combined * sum(mle_phi_combined^(2*
seq(from = 0,
to = .x-1))))) %>%
ggplot(mapping = aes(x = j,
y = variance))+
geom_point()+
ylim(0, NA)
tibble(j = seq(from = 1,
to = 5),
variance = map_dbl(.x = j, .f = ~ mle_var_combined * sum(mle_phi_combined^(2*
seq(from = 0,
to = .x-1))))) %>%
ggplot(mapping = aes(x = j,
y = variance))+
geom_point()+
ylim(0, NA)
View(data_tuno)
tibble(j = seq(from = 1,
to = 5),
variance = map_dbl(.x = j, .f = ~ mle_var_combined * sum(mle_phi_combined^(2*
seq(from = 0,
to = .x-1))))) %>%
ggplot(mapping = aes(x = j,
y = variance))+
geom_point()+
ylim(0, NA)+
labs(x = "Days into the future",
y = "Conditional variance of normalised wind power (transformed domain)")
tibble(j = seq(from = 1,
to = 5),
variance = map_dbl(.x = j, .f = ~ mle_var_combined * sum(mle_phi_combined^(2*
seq(from = 0,
to = .x-1))))) %>%
ggplot(mapping = aes(x = j,
y = variance))+
geom_point()+
ylim(0, NA)+
labs(x = "Days into the future",
y = "Conditional Variance of Wind Power (Transformed Domain)")
tibble(j = seq(from = 1,
to = 5),
variance = map_dbl(.x = j, .f = ~ mle_var_combined * sum(mle_phi_combined^(2*
seq(from = 0,
to = .x-1))))) %>%
ggplot(mapping = aes(x = j,
y = variance))+
geom_point()+
ylim(0, NA)+
labs(x = "Days into the Future",
y = "Conditional Variance of Wind Power (Transformed Domain)")
tibble(j = seq(from = 1,
to = 5),
variance = map_dbl(.x = j, .f = ~ mle_var_combined * sum(mle_phi_combined^(2*
seq(from = 0,
to = .x-1))))) %>%
ggplot(mapping = aes(x = j,
y = variance))+
geom_point()+
ylim(0, NA)+
labs(x = "Days into the Future",
y = "Conditional Variance of Wind Power (Transformed Domain)")
ggsave(filename = "conditional_variance_vs_days_into_future__plot.svg",
path = "output",
width = 15,
height = 10,
units = "cm")
380*2
tibble(j = seq(from = 1,
to = 5),
variance = map_dbl(.x = j, .f = ~ mle_var_combined * sum(mle_phi_combined^(2*
seq(from = 0,
to = .x-1))))) %>%
ggplot(mapping = aes(x = j,
y = variance))+
geom_point()+
ylim(0, NA)+
labs(x = "Days into the Future",
y = "Conditional Variance of Wind Power (Transformed Domain)")
ggsave(filename = "conditional_variance_vs_days_into_future__plot.svg",
path = "output",
width = 21,
height = 14,
units = "cm")
tibble(j = seq(from = 1,
to = 5),
variance = map_dbl(.x = j, .f = ~ mle_var_combined * sum(mle_phi_combined^(2*
seq(from = 0,
to = .x-1))))) %>%
ggplot(mapping = aes(x = j,
y = variance))+
geom_point()+
ylim(0, NA)+
labs(x = "Days into the Future",
y = "Conditional Variance of Wind Power")
ggsave(filename = "conditional_variance_vs_days_into_future__plot.svg",
path = "output",
width = 15,
height = 10,
units = "cm")
ggsave(filename = "model_performance.svg",
path = "../out")
#!/usr/bin/env Rscript
library(tidyverse)
library(svglite)
data <- read_tsv(file = "../out/model_performance.tsv",
col_types = cols(partition = col_integer(),
peptide = col_factor(),
count = col_integer()))
data <- data %>%
filter(partition == 2) %>%
pivot_longer(cols = c(auc,
auc01,
ppv),
names_to = "performance_metric") %>%
ggplot(mapping = aes(x = value,
y = peptide %>%
fct_rev(),
fill = performance_metric))+
geom_col(position = "dodge")
ggsave(filename = "model_performance.svg",
path = "../out")
library(tidyverse)
library(svglite)
data <- read_tsv(file = "../out/model_performance.tsv",
col_types = cols(peptide = col_factor(),
count_positive = col_integer()))
setwd("~/Documents/university/Kandidat/masters_thesis/CNN_code")
library(tidyverse)
library(svglite)
data <- read_tsv(file = "../out/model_performance.tsv",
col_types = cols(peptide = col_factor(),
count_positive = col_integer()))
library(tidyverse)
library(svglite)
data <- read_tsv(file = "../out/model_performance.tsv",
col_types = cols(peptide = col_factor(),
count_positive = col_integer()))
plot_performance <- function(data) {
p <- data |>
ggplot(mapping = aes(x = performance,
y = peptide_count_positive |>
as_factor() |>
fct_rev(),
color = metric,
group = metric))+
geom_point()+
geom_path()+
xlim(0, 1)+
labs(x = "Performance",
y = "Peptide",
color = "Metric")+
theme(legend.position = "top",
legend.justification = "left")
ggsave(filename = "plot_performance.svg",
plot = p,
path = "../out")
}
data |>
pivot_longer(cols = c(auc,
auc01,
ppv),
names_to = "metric",
values_to = "performance") |>
mutate(metric = case_when(metric == "auc" ~ "AUC",
metric == "auc01" ~ "AUC 0.1",
metric == "ppv" ~ "PPV") |>
as_factor(),
peptide_count_positive = str_glue("{peptide} ({count_positive})")) |>
group_by(partition) |>
group_walk(.f = \(.x, .y) plot_performance(.x, .y))
data |>
pivot_longer(cols = c(auc,
auc01,
ppv),
names_to = "metric",
values_to = "performance") |>
mutate(metric = case_when(metric == "auc" ~ "AUC",
metric == "auc01" ~ "AUC 0.1",
metric == "ppv" ~ "PPV") |>
as_factor(),
peptide_count_positive = str_glue("{peptide} ({count_positive})")) |>
plot_performance()
