####!/usr/bin/env python

"""
Functions for data IO for neural network training.
"""

from __future__ import print_function # Might not be necessary, used to import print function in older python version
import argparse
import sys
import os
import time
import matplotlib.pyplot as plt
from operator import add
import math
import numpy as np

def mkdir(outdir):
    if not os.path.exists(outdir):
        os.makedirs(outdir)

def enc_list_bl_max_len(aa_seqs, blosum, max_seq_len, padding = "right"):
    '''
    blosum encoding of a list of amino acid sequences with padding 
    to a max length

    parameters:
        - aa_seqs : list with AA sequences
        - blosum : dictionnary: key= AA, value= blosum encoding
        - max_seq_len: common length for padding
    returns:
        - enc_aa_seq : list of np.ndarrays containing padded, encoded amino acid sequences
    '''

    # encode sequences:
    sequences=[]
    for seq in aa_seqs:
        e_seq= np.zeros((len(seq),len(blosum["A"])))
        count=0
        for aa in seq:
            if aa in blosum:
                e_seq[count]=blosum[aa]
                count+=1
            else:
                sys.stderr.write("Unknown amino acid in peptides: "+ aa +", encoding aborted!\n")
                sys.exit(2)

        sequences.append(e_seq)

    # pad sequences:
    #max_seq_len = max([len(x) for x in aa_seqs])
    n_seqs = len(aa_seqs)
    n_features = sequences[0].shape[1]

    enc_aa_seq = -5*np.ones((n_seqs, max_seq_len, n_features))
    if padding == "right":
        for i in range(0,n_seqs):
            enc_aa_seq[i, :sequences[i].shape[0], :n_features] = sequences[i]
            
    elif padding == "left":
        for i in range(0,n_seqs):
            enc_aa_seq[i, max_seq_len-sequences[i].shape[0]:max_seq_len, :n_features] = sequences[i]
    
    else:
        print("Error: No valid padding has been chosen.\nValid options: 'right', 'left'")
        

    return enc_aa_seq



##############################
# Different encoding schemes #
##############################


blosum50_20aa = {
        'A': np.array((5,-2,-1,-2,-1,-1,-1,0,-2,-1,-2,-1,-1,-3,-1,1,0,-3,-2,0)),
        'R': np.array((-2,7,-1,-2,-4,1,0,-3,0,-4,-3,3,-2,-3,-3,-1,-1,-3,-1,-3)),
        'N': np.array((-1,-1,7,2,-2,0,0,0,1,-3,-4,0,-2,-4,-2,1,0,-4,-2,-3)),
        'D': np.array((-2,-2,2,8,-4,0,2,-1,-1,-4,-4,-1,-4,-5,-1,0,-1,-5,-3,-4)),
        'C': np.array((-1,-4,-2,-4,13,-3,-3,-3,-3,-2,-2,-3,-2,-2,-4,-1,-1,-5,-3,-1)),
        'Q': np.array((-1,1,0,0,-3,7,2,-2,1,-3,-2,2,0,-4,-1,0,-1,-1,-1,-3)),
        'E': np.array((-1,0,0,2,-3,2,6,-3,0,-4,-3,1,-2,-3,-1,-1,-1,-3,-2,-3)),
        'G': np.array((0,-3,0,-1,-3,-2,-3,8,-2,-4,-4,-2,-3,-4,-2,0,-2,-3,-3,-4)),
        'H': np.array((-2,0,1,-1,-3,1,0,-2,10,-4,-3,0,-1,-1,-2,-1,-2,-3,2,-4)),
        'I': np.array((-1,-4,-3,-4,-2,-3,-4,-4,-4,5,2,-3,2,0,-3,-3,-1,-3,-1,4)),
        'L': np.array((-2,-3,-4,-4,-2,-2,-3,-4,-3,2,5,-3,3,1,-4,-3,-1,-2,-1,1)),
        'K': np.array((-1,3,0,-1,-3,2,1,-2,0,-3,-3,6,-2,-4,-1,0,-1,-3,-2,-3)),
        'M': np.array((-1,-2,-2,-4,-2,0,-2,-3,-1,2,3,-2,7,0,-3,-2,-1,-1,0,1)),
        'F': np.array((-3,-3,-4,-5,-2,-4,-3,-4,-1,0,1,-4,0,8,-4,-3,-2,1,4,-1)),
        'P': np.array((-1,-3,-2,-1,-4,-1,-1,-2,-2,-3,-4,-1,-3,-4,10,-1,-1,-4,-3,-3)),
        'S': np.array((1,-1,1,0,-1,0,-1,0,-1,-3,-3,0,-2,-3,-1,5,2,-4,-2,-2)),
        'T': np.array((0,-1,0,-1,-1,-1,-1,-2,-2,-1,-1,-1,-1,-2,-1,2,5,-3,-2,0)),
        'W': np.array((-3,-3,-4,-5,-5,-1,-3,-3,-3,-3,-2,-3,-1,1,-4,-4,-3,15,2,-3)),
        'Y': np.array((-2,-1,-2,-3,-3,-1,-2,-3,2,-1,-1,-2,0,4,-3,-2,-2,2,8,-1)),
        'V': np.array((0,-3,-3,-4,-1,-3,-3,-4,-4,4,1,-3,1,-1,-3,-2,0,-3,-1,5))
    }

blosum50 = {
    'A': np.array(( 5,-2,-1,-2,-1,-1,-1, 0,-2,-1,-2,-1,-1,-3,-1, 1, 0,-3,-2, 0,-2,-1,-1,-5)), 
    'R': np.array((-2, 7,-1,-2,-4, 1, 0,-3, 0,-4,-3, 3,-2,-3,-3,-1,-1,-3,-1,-3,-1, 0,-1,-5)), 
    'N': np.array((-1,-1, 7, 2,-2, 0, 0, 0, 1,-3,-4, 0,-2,-4,-2, 1, 0,-4,-2,-3, 4, 0,-1,-5)), 
    'D': np.array((-2,-2, 2, 8,-4, 0, 2,-1,-1,-4,-4,-1,-4,-5,-1, 0,-1,-5,-3,-4, 5, 1,-1,-5)), 
    'C': np.array((-1,-4,-2,-4,13,-3,-3,-3,-3,-2,-2,-3,-2,-2,-4,-1,-1,-5,-3,-1,-3,-3,-2,-5)), 
    'Q': np.array((-1, 1, 0, 0,-3, 7, 2,-2, 1,-3,-2, 2, 0,-4,-1, 0,-1,-1,-1,-3, 0, 4,-1,-5)), 
    'E': np.array((-1, 0, 0, 2,-3, 2, 6,-3, 0,-4,-3, 1,-2,-3,-1,-1,-1,-3,-2,-3, 1, 5,-1,-5)), 
    'G': np.array(( 0,-3, 0,-1,-3,-2,-3, 8,-2,-4,-4,-2,-3,-4,-2, 0,-2,-3,-3,-4,-1,-2,-2,-5)), 
    'H': np.array((-2, 0, 1,-1,-3, 1, 0,-2,10,-4,-3, 0,-1,-1,-2,-1,-2,-3, 2,-4, 0, 0,-1,-5)), 
    'I': np.array((-1,-4,-3,-4,-2,-3,-4,-4,-4, 5, 2,-3, 2, 0,-3,-3,-1,-3,-1, 4,-4,-3,-1,-5)), 
    'L': np.array((-2,-3,-4,-4,-2,-2,-3,-4,-3, 2, 5,-3, 3, 1,-4,-3,-1,-2,-1, 1,-4,-3,-1,-5)), 
    'K': np.array((-1, 3, 0,-1,-3, 2, 1,-2, 0,-3,-3, 6,-2,-4,-1, 0,-1,-3,-2,-3, 0, 1,-1,-5)), 
    'M': np.array((-1,-2,-2,-4,-2, 0,-2,-3,-1, 2, 3,-2, 7, 0,-3,-2,-1,-1, 0, 1,-3,-1,-1,-5)), 
    'F': np.array((-3,-3,-4,-5,-2,-4,-3,-4,-1, 0, 1,-4, 0, 8,-4,-3,-2, 1, 4,-1,-4,-4,-2,-5)), 
    'P': np.array((-1,-3,-2,-1,-4,-1,-1,-2,-2,-3,-4,-1,-3,-4,10,-1,-1,-4,-3,-3,-2,-1,-2,-5)), 
    'S': np.array(( 1,-1, 1, 0,-1, 0,-1, 0,-1,-3,-3, 0,-2,-3,-1, 5, 2,-4,-2,-2, 0, 0,-1,-5)), 
    'T': np.array(( 0,-1, 0,-1,-1,-1,-1,-2,-2,-1,-1,-1,-1,-2,-1, 2, 5,-3,-2, 0, 0,-1, 0,-5)), 
    'W': np.array((-3,-3,-4,-5,-5,-1,-3,-3,-3,-3,-2,-3,-1, 1,-4,-4,-3,15, 2,-3,-5,-2,-3,-5)), 
    'Y': np.array((-2,-1,-2,-3,-3,-1,-2,-3, 2,-1,-1,-2, 0, 4,-3,-2,-2, 2, 8,-1,-3,-2,-1,-5)), 
    'V': np.array(( 0,-3,-3,-4,-1,-3,-3,-4,-4, 4, 1,-3, 1,-1,-3,-2, 0,-3,-1, 5,-4,-3,-1,-5)), 
    'B': np.array((-2,-1, 4, 5,-3, 0, 1,-1, 0,-4,-4, 0,-3,-4,-2, 0, 0,-5,-3,-4, 5, 2,-1,-5)), 
    'Z': np.array((-1, 0, 0, 1,-3, 4, 5,-2, 0,-3,-3, 1,-1,-4,-1, 0,-1,-2,-2,-3, 2, 5,-1,-5)), 
    'X': np.array((-1,-1,-1,-1,-2,-1,-1,-2,-1,-1,-1,-1,-1,-2,-2,-1, 0,-3,-1,-1,-1,-1,-1,-5)), 
    '*': np.array((-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5, 1))
}

one_hot = {
        'A': np.array((1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)),
        'R': np.array((0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)),
        'N': np.array((0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)),
        'D': np.array((0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)),
        'C': np.array((0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)),
        'Q': np.array((0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)),
        'E': np.array((0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0)),
        'G': np.array((0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0)),
        'H': np.array((0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0)),
        'I': np.array((0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0)),
        'L': np.array((0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0)),
        'K': np.array((0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0)),
        'M': np.array((0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0)),
        'F': np.array((0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0)),
        'P': np.array((0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0)),
        'S': np.array((0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0)),
        'T': np.array((0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0)),
        'W': np.array((0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0)),
        'Y': np.array((0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0)),
        'V': np.array((0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0)),
        'X': np.array((0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1))
    }
    
one_hot_20aa = {
        'A': np.array((1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)),
        'R': np.array((0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)),
        'N': np.array((0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)),
        'D': np.array((0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)),
        'C': np.array((0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)),
        'Q': np.array((0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0)),
        'E': np.array((0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0)),
        'G': np.array((0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0)),
        'H': np.array((0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0)),
        'I': np.array((0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0)),
        'L': np.array((0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0)),
        'K': np.array((0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0)),
        'M': np.array((0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0)),
        'F': np.array((0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0)),
        'P': np.array((0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0)),
        'S': np.array((0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0)),
        'T': np.array((0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0)),
        'W': np.array((0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0)),
        'Y': np.array((0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0)),
        'V': np.array((0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1))
    }


amino_to_idx={
        'A': np.array((1,)),
        'R': np.array((2,)),
        'N': np.array((3,)),
        'D': np.array((4,)),
        'C': np.array((5,)),
        'Q': np.array((6,)),
        'E': np.array((7,)),
        'G': np.array((8,)),
        'H': np.array((9,)),
        'I': np.array((10,)),
        'L': np.array((11,)),
        'K': np.array((12,)),
        'M': np.array((13,)),
        'F': np.array((14,)),
        'P': np.array((15,)),
        'S': np.array((16,)),
        'T': np.array((17,)),
        'W': np.array((18,)),
        'Y': np.array((19,)),
        'V': np.array((20,)),
        'X': np.array((21,))
    }

phys_chem = {
        'A': np.array((1, -6.7, 0, 0, 0)),
        'R': np.array((4, -11.7, 0, 0, 0)),
        'N': np.array((6.13, 51.5, 4, 0, 1)),
        'D': np.array((4.77, 36.8, 2, 0, 1)),
        'C': np.array((2.95, 20.1, 2, 2, 0)),
        'Q': np.array((4.43, -14.4, 0, 0, 0)),
        'E': np.array((2.78, 38.5, 1, 4, -1)),
        'G': np.array((5.89, -15.5, 0, 0, 0)),
        'H': np.array((2.43, -8.4, 0, 0, 0)),
        'I': np.array((2.72, 0.8, 0, 0, 0)),
        'L': np.array((3.95, 17.2, 2, 2, 0)),
        'K': np.array((1.6, -2.5, 1,  2, 0)),
        'M': np.array((3.78, 34.3, 1, 4, -1)),
        'F': np.array((2.6, -5, 1, 2, 0)),
        'P': np.array((0, -4.2, 0, 0,0)),
        'S': np.array((8.08, -7.9, 1, 0,0)),
        'T': np.array((4.66, 12.6, 1, 1, 0)),
        'W': np.array((6.47, 2.9, 1, 1, 0)),
        'Y': np.array((4, -13, 0, 0,0)),
        'V': np.array((3, -10.9, 0, 0,0))
    }

blosum62 = {
        'A': np.array((4, -1, -2, -2, 0, -1, -1, 0, -2, -1, -1, -1, -1, -2, -1, 1, 0, -3, -2,  0,  0)),
        'R': np.array((-1,  5,  0, -2, -3,  1,  0, -2,  0, -3, -2,  2, -1, -3, -2, -1, -1, -3, -2, -3, -1)),
        'N': np.array((-2,  0,  6,  1, -3,  0,  0,  0,  1, -3, -3,  0, -2, -3, -2,  1,  0, -4, -2, -3,  -1)),
        'D': np.array((-2, -2,  1,  6, -3,  0,  2, -1, -1, -3, -4, -1, -3, -3, -1,  0, -1, -4, -3, -3,  -1)),
        'C': np.array((0, -3, -3, -3,  9, -3, -4, -3, -3, -1, -1, -3, -1, -2, -3, -1, -1, -2, -2, -1, -2)),
        'Q': np.array((-1,  1,  0,  0, -3,  5,  2, -2,  0, -3, -2,  1,  0, -3, -1,  0, -1, -2, -1, -2,  -1)),
        'E': np.array((-1,  0,  0,  2, -4,  2,  5, -2,  0, -3, -3,  1, -2, -3, -1,  0, -1, -3, -2, -2,  -1)),
        'G': np.array((0, -2,  0, -1, -3, -2, -2,  6, -2, -4, -4, -2, -3, -3, -2,  0, -2, -2, -3, -3, -1)),
        'H': np.array((-2,  0,  1, -1, -3,  0,  0, -2,  8, -3, -3, -1, -2, -1, -2, -1, -2, -2,  2, -3,  -1)),
        'I': np.array((-1, -3, -3, -3, -1, -3, -3, -4, -3,  4,  2, -3,  1,  0, -3, -2, -1, -3, -1,  3, -1)),
        'L': np.array((-1, -2, -3, -4, -1, -2, -3, -4, -3,  2,  4, -2,  2,  0, -3, -2, -1, -2, -1,  1, -1)),
        'K': np.array((-1, -2, -3, -4, -1, -2, -3, -4, -3,  2,  4, -2,  2,  0, -3, -2, -1, -2, -1,  1, -1)),
        'M': np.array((-1, -1, -2, -3, -1,  0, -2, -3, -2,  1,  2, -1,  5,  0, -2, -1, -1, -1, -1,  1, -1)),
        'F': np.array((-2, -3, -3, -3, -2, -3, -3, -3, -1,  0,  0, -3,  0,  6, -4, -2, -2,  1,  3, -1, -1)),
        'P': np.array((-1, -2, -2, -1, -3, -1, -1, -2, -2, -3, -3, -1, -2, -4,  7, -1, -1, -4, -3, -2, -2)),
        'S': np.array((1, -1,  1,  0, -1,  0,  0,  0, -1, -2, -2,  0, -1, -2, -1,  4,  1, -3, -2, -2,   0)),
        'T': np.array((0, -1,  0, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1, -2, -1,  1,  5, -2, -2,  0,  0)),
        'W': np.array((-3, -3, -4, -4, -2, -2, -3, -2, -2, -3, -2, -3, -1,  1, -4, -3, -2, 11,  2, -3, -2)),
        'Y': np.array((-2, -2, -2, -3, -2, -1, -2, -3,  2, -1, -1, -2, -1,  3, -3, -2, -2,  2,  7, -1, -1)),
        'V': np.array((0, -3, -3, -3, -1, -2, -2, -3, -3,  3,  1, -2,  1, -1, -2, -2,  0, -3, -1,  4, -1)),
        'X': np.array((0, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2,  0,  0, -2, -1, -1, -1))
        }
        
blosum62_20aa = {
        'A': np.array((4, -1, -2, -2, 0, -1, -1, 0, -2, -1, -1, -1, -1, -2, -1, 1, 0, -3, -2,  0)),
        'R': np.array((-1,  5,  0, -2, -3,  1,  0, -2,  0, -3, -2,  2, -1, -3, -2, -1, -1, -3, -2, -3)),
        'N': np.array((-2,  0,  6,  1, -3,  0,  0,  0,  1, -3, -3,  0, -2, -3, -2,  1,  0, -4, -2, -3)),
        'D': np.array((-2, -2,  1,  6, -3,  0,  2, -1, -1, -3, -4, -1, -3, -3, -1,  0, -1, -4, -3, -3)),
        'C': np.array((0, -3, -3, -3,  9, -3, -4, -3, -3, -1, -1, -3, -1, -2, -3, -1, -1, -2, -2, -1)),
        'Q': np.array((-1,  1,  0,  0, -3,  5,  2, -2,  0, -3, -2,  1,  0, -3, -1,  0, -1, -2, -1, -2)),
        'E': np.array((-1,  0,  0,  2, -4,  2,  5, -2,  0, -3, -3,  1, -2, -3, -1,  0, -1, -3, -2, -2)),
        'G': np.array((0, -2,  0, -1, -3, -2, -2,  6, -2, -4, -4, -2, -3, -3, -2,  0, -2, -2, -3, -3)),
        'H': np.array((-2,  0,  1, -1, -3,  0,  0, -2,  8, -3, -3, -1, -2, -1, -2, -1, -2, -2,  2, -3)),
        'I': np.array((-1, -3, -3, -3, -1, -3, -3, -4, -3,  4,  2, -3,  1,  0, -3, -2, -1, -3, -1,  3)),
        'L': np.array((-1, -2, -3, -4, -1, -2, -3, -4, -3,  2,  4, -2,  2,  0, -3, -2, -1, -2, -1,  1)),
        'K': np.array((-1, -2, -3, -4, -1, -2, -3, -4, -3,  2,  4, -2,  2,  0, -3, -2, -1, -2, -1,  1)),
        'M': np.array((-1, -1, -2, -3, -1,  0, -2, -3, -2,  1,  2, -1,  5,  0, -2, -1, -1, -1, -1,  1)),
        'F': np.array((-2, -3, -3, -3, -2, -3, -3, -3, -1,  0,  0, -3,  0,  6, -4, -2, -2,  1,  3, -1)),
        'P': np.array((-1, -2, -2, -1, -3, -1, -1, -2, -2, -3, -3, -1, -2, -4,  7, -1, -1, -4, -3, -2)),
        'S': np.array((1, -1,  1,  0, -1,  0,  0,  0, -1, -2, -2,  0, -1, -2, -1,  4,  1, -3, -2, -2)),
        'T': np.array((0, -1,  0, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1, -2, -1,  1,  5, -2, -2,  0)),
        'W': np.array((-3, -3, -4, -4, -2, -2, -3, -2, -2, -3, -2, -3, -1,  1, -4, -3, -2, 11,  2, -3)),
        'Y': np.array((-2, -2, -2, -3, -2, -1, -2, -3,  2, -1, -1, -2, -1,  3, -3, -2, -2,  2,  7, -1)),
        'V': np.array((0, -3, -3, -3, -1, -2, -2, -3, -3,  3,  1, -2,  1, -1, -2, -2,  0, -3, -1,  4)),
        }

            
def adjust_batch_size(obs, batch_size, threshold = 0.5):
    if obs/batch_size < threshold:
        pass
    
    else:
        if (obs/batch_size % 1) >= threshold:
            pass
        else:
            while (obs/batch_size % 1) < threshold and (obs/batch_size % 1) != 0:
                batch_size += 1
    return batch_size
